package display.map{	//imports	import core.Level;		import display.enemy.Enemy;		import flash.display.*;	import flash.events.*;	import flash.geom.*;

	public class DirectBlock extends Block{				private var directType:String;//what kind of special block is this				public function DirectBlock(root:TowerDefense, iniX:Number, iniY:Number, type:String){						super(root, iniX, iniY);						directType = type;//set the directType so that all other functions can use it		}				override protected function beginClass(e:Event):void{			super.beginClass(e);						//making this into a 25x25 square			this.graphics.beginFill(0x111111);			this.graphics.drawRect(0,0,25,25);			this.graphics.endFill();						if(directType == Level.S){//if this is a start block				//then define the startDir and StartCoord based on it's coordinates				if(this.x == 0){					_root.level.startDir = Level.R;					_root.level.startCoord = this.y;				} else if (this.y == 0){					_root.level.startDir = Level.D;					_root.level.startCoord = this.x;				} else if (this.x == 525){					_root.level.startDir = Level.L;					_root.level.startCoord = this.y;				} else if (this.y == 275){					_root.level.startDir = Level.U;					_root.level.startCoord = this.x;				} else {					//this level won't work if not any of these values				}			} else if (directType == Level.F){//if this is a finish block				//then define the finDir based on it's coordinates				if(this.x == 0){					_root.level.finDir = Level.L;				} else if (this.y == 0){					_root.level.finDir = Level.U;				} else if (this.x == 525){					_root.level.finDir = Level.R;				} else if (this.y == 275){					_root.level.finDir = Level.D;				} else {					//this level won't work if not any of these values				}			}		}				override protected function update(e:Event):void{						super.update(e);						if(directType != Level.S && directType != Level.F){//if this isn't a start of finish block				//then it'll act as a directioning block				for(var i:int = 0;i<_root.enemyHolder.numChildren;i++){//create a loop					var enTarget:Enemy = _root.enemyHolder.getChildAt(i) as Enemy;//this will hold a certain enemy					//if the enTarget's coordinates are too close to this block					if(this.x >= enTarget.x - enTarget.width*.5 && this.x <= enTarget.x + enTarget.width*.5					&& this.y >= enTarget.y - enTarget.height*.5 && this.y <= enTarget.y + enTarget.height*.5){						//then move the enemy's direction based on what direction this block points to						if(directType == Level.U){							enTarget.xSpeed = 0;							enTarget.ySpeed = -enTarget.maxSpeed;						} else if(directType == Level.R){							enTarget.xSpeed = enTarget.maxSpeed;							enTarget.ySpeed = 0;						} else if(directType == Level.D){							enTarget.xSpeed = 0;							enTarget.ySpeed = enTarget.maxSpeed;						} else if(directType == Level.L){							enTarget.xSpeed = enTarget.maxSpeed;							enTarget.ySpeed = 0;						}					}				}			}		}	}}