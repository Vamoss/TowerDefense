package display.shooter{//creating the basic skeleton	import display.bullet.Bullet;	import display.enemy.Enemy;		import flash.display.DisplayObject;	import flash.display.MovieClip;		import flash.events.Event;	import flash.events.MouseEvent;

	public class Shooter extends MovieClip{		protected var _root:TowerDefense;				protected const radiansToDegrees:Number = 180/Math.PI;//this is needed for the rotation				protected var damage:int = 3;//how much damage this little baby can inflict		protected var range:int = 100;//how far away (in pixels) it can hit a target		protected var enTarget:Enemy;//the current target that it's rotating towards		protected var cTime:int = 0;//how much time since a shot was fired by this turret		protected var reloadTime:int = 12;//how long it takes to fire another shot		protected var loaded:Boolean = true;//whether or not this turret can shoot				public function Shooter(root:TowerDefense){			_root = root;						//adding the required listeners			this.addEventListener(Event.ADDED, beginClass);			this.addEventListener(Event.ENTER_FRAME, update);			this.addEventListener(MouseEvent.MOUSE_OVER, thisMouseOver);			this.addEventListener(MouseEvent.MOUSE_OUT, thisMouseOut);		}				protected function beginClass(e:Event):void{					}				protected function update(e:Event):void{			//FINDING THE NEAREST ENEMY WITHIN RANGE			var distance:Number = range;//let's define a variable which will be how far the nearest enemy is			enTarget = null;//right now, we don't have a target to shoot at			for(var i:uint=0; i < _root.enemyHolder.numChildren && enTarget==null;i++){//loop through the children in enemyHolder				var cEnemy:DisplayObject = _root.enemyHolder.getChildAt(i);//define a movieclip that will hold the current child				//this simple formula with get us the distance of the current enemy				if(Math.sqrt(Math.pow(cEnemy.y - y, 2) + Math.pow(cEnemy.x - x, 2)) < distance){					//if the selected enemy is close enough, then set it as the target					enTarget = cEnemy as Enemy;				}			}			//ROTATING TOWARDS TARGET			if(enTarget != null){//if we have a defined target				shoot();			}			//LOADING THE TURRET			if(!loaded){//if it isn't loaded				cTime ++;//then continue the time				if(cTime == reloadTime){//if time has elapsed for long enough					loaded = true;//load the turret					cTime = 0;//and reset the time				}			}			if(_root.isGameOver){//destroy this if game is over				this.removeEventListener(Event.ENTER_FRAME, update);				if(this.parent.contains(this)) this.parent.removeChild(this);			}		}				protected function thisMouseOver(e:MouseEvent):void{			_root.rangeCircle.x = this.x-12.5;			_root.rangeCircle.y = this.y-12.5;			_root.addChild(_root.rangeCircle);		}				protected function thisMouseOut(e:MouseEvent):void{			_root.removeChild(_root.rangeCircle);		}				public function shoot():void{			if(loaded){//if the turret is able to shoot				loaded = false;//then make in unable to do it for a bit				var newBullet:Bullet = new Bullet(_root);//create a bullet				//set the bullet's coordinates				newBullet.x = this.x;				newBullet.y = this.y;				//set the bullet's target and damage				newBullet.target = enTarget;				newBullet.damage = damage;				newBullet.maxDistance = range;				_root.addChild(newBullet);//add it to the stage			}			}	}}