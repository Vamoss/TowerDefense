package display.screen{	import core.Level;
	
	import display.enemy.Enemy;
	import display.map.Map;
	import display.shooter.Selector;
	import display.shooter.Turret;
	
	import flash.display.MovieClip;
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.text.TextField;

	public class Game extends Screen{				public static const WIN:String = "GameWin";		public static const LOSE:String = "GameLose";				public var isOver:Boolean;				public var money:int;//how much money the player has to spend on turrets		public var lives:int;//how many lives the player has				public var rangeCircle:Shape = new Shape();		public var enemyHolder:Sprite = new Sprite();						public var map:Map;		public var level:Level = new Level();				public var shooterSelector:Selector;				private var txtLevel:TextField = new TextField();				private var txtMoney:TextField = new TextField();				private var txtLives:TextField = new TextField();				private var txtEnemiesLeft:TextField = new TextField();		private var txtTimer:TextField = new TextField();				public function Game(root:TowerDefense){						super(root);						txtLevel.x = 				txtMoney.x = 				txtLives.x = 				txtEnemiesLeft.x = 				txtTimer.x = 10;						txtLevel.y = 310;			txtMoney.y = 330;			txtLives.y = 350;			txtEnemiesLeft.y = 370;			txtTimer.y = 390;									addChild(txtLevel);			addChild(txtMoney);			addChild(txtLives);			addChild(txtEnemiesLeft);			addChild(txtTimer);						rangeCircle.graphics.beginFill(0x006600,.5);			rangeCircle.graphics.drawCircle(_root.gridScaleHalf,_root.gridScaleHalf,100);			rangeCircle.graphics.endFill();						map = new Map(_root)			addChild(map);						shooterSelector = new Selector(_root);						addChild(enemyHolder);		}				override protected function beginClass(e:Event):void		{			super.beginClass(e);		}				public function start():void		{			//we'll run this function every time a new level begins			for(var i:int=0;i<level.enemyArray[level.currentLvl-1].length;i++){				if(level.enemyArray[level.currentLvl-1][i] != 0){					level.enemiesLeft ++;				}			}		}				public function reset():void		{				initVars();			map.makeRoad();			start();						addEventListener(Event.ENTER_FRAME, update);//adding an update function		}				public function over():void		{			isOver=true;//set the game to be over						removeEventListener(Event.ENTER_FRAME, update);			}				private function update(e:Event):void{			if(lives<=0){//if the user runs out of lives				over();				dispatchEvent(new Event(Game.LOSE));			}else if(!isOver){								makeEnemies();//we'll just make some enemies								if(level.enemiesLeft==0){//if there are no more enemies left										level.currentLvl ++;//continue to the next level										if(level.currentLvl > level.enemyArray.length){						dispatchEvent(new Event(Game.WIN));						over();					}else{						level.currentEnemy = 0;//reset the amount of enemies there are						start();//restart the game					}									}								//Updating the text fields				txtLevel.text = 'Level '+level.currentLvl;				txtMoney.text = '$'+money;				txtLives.text = 'Lives: '+lives;				txtEnemiesLeft.text = 'Enemies Left:  '+level.enemiesLeft;				txtTimer.text = 'Time: '+level.timeElapsed;			}		}				private function makeEnemies():void{//this function will add enemies to the field			if(level.enemyTime < level.enemyLimit){//if it isn't time to make them yet				level.enemyTime ++;//then keep on waiting			} else {				var theCode:int = level.enemyArray[level.currentLvl-1][level.currentEnemy];//get the code from the array				if(theCode != 0){//if it isn't an empty space					var newEnemy:Enemy = new Enemy(_root, theCode);//then create a new enemy and pass in the code					enemyHolder.addChild(newEnemy);//and add it to the enemyholder				}				level.currentEnemy ++;//move on to the next enemy				level.enemyTime = 0;//and reset the time			}		}				public function initVars():void{			level.start();						isOver = false;						money=100;			lives=20;					}	}}